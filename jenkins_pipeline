pipeline{
    agent any
    tools{
        jdk 'jdk17'
        nodejs 'node16'
    }
    environment {
        SCANNER_HOME=tool 'sonar-scanner'
    }
    stages {
        stage('clean workspace'){
            steps{
                cleanWs()
            }
        }
        stage('Checkout from Git'){
            steps{
                git branch: 'main', url: 'https://github.com/PARPSY1122/a-youtube-clone-app.git'
            }
        }
        stage("Sonarqube Analysis "){
            steps{
                withSonarQubeEnv('sonar-server') {
                    sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=youtube-clone \
                    -Dsonar.projectKey=youtube-clone '''
                }
            }
        }
        stage("quality gate"){
           steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token' 
                }
            } 
        }
        stage('Install Dependencies') {
            steps {
                sh "npm install"
            }
        }
        stage('TRIVY FS SCAN') {
            steps {
                sh "trivy fs . > trivyfs.txt"
            }
        }
        stage("Docker Build & Push"){
            steps{
                script{
                   withDockerRegistry(credentialsId: 'docker-hub', toolName: 'docker'){   
                       sh "docker build --build-arg REACT_APP_RAPID_API_KEY=f0ead79813ms -t youtube-clone ."
                       sh "docker tag youtube-clone ajayreddy1122/youtube-clone:latest "
                       sh "docker push ajayreddy1122/youtube-clone:latest "
                    }
                }
            }
        }
        stage("TRIVY"){
            steps{
                sh "trivy image ajayreddy1122/youtube-clone:latest > trivyimage.txt" 
            }
        }
        stage('deploy kubernates'){
          steps{
            script{
              dir('kubernates'){
                withKubeConfig(caCetificate: '', clusterName: '', contextName: '', credentialId: 'kubernates', namespace: '', ristrictKubeConfigAccess: false, serverUrl: ''){
                sh 'kubectl delete --all pods'
                sh 'kubectl apply -f deployment.yaml'
                sh 'kubectl apply -f service.yaml'
                }
              }
            }
          }
        }
        post{
            always{
                emailext attachLog: true,
                subject: "'${currentBuild.result}'",
                body: "Project: ${env.JOB_NAME}<br/>" +
                    "Build Number: ${env.BUILD_NUMBER}<br/>" +
                    "URL: ${env.BUILD_URL}<br/>",
                to: 'ajay05marolix@gmail.com',
                attachmentsPattern: 'trivy.txt, trivyimage.txt' 
            }
        }
    }
}
